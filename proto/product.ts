// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v4.25.2
// source: proto/product.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "products";

export interface Product {
  id: number;
  name: string;
  description: string;
  price: number;
  stockQuantity: number;
  categoryId: number;
  brandId: number;
}

export interface GetProductRequest {
  id: number;
}

export interface CreateProductRequest {
  product: Product | undefined;
}

export interface UpdateProductRequest {
  product: Product | undefined;
}

export interface DeleteProductRequest {
  id: number;
}

export interface ListProductsRequest {
}

export interface ListProductsResponse {
  products: Product[];
}

export const PRODUCTS_PACKAGE_NAME = "products";

export interface ProductServiceClient {
  getProduct(request: GetProductRequest): Observable<Product>;

  createProduct(request: CreateProductRequest): Observable<Product>;

  updateProduct(request: UpdateProductRequest): Observable<Product>;

  deleteProduct(request: DeleteProductRequest): Observable<Product>;

  listProducts(request: ListProductsRequest): Observable<ListProductsResponse>;
}

export interface ProductServiceController {
  getProduct(request: GetProductRequest): Promise<Product> | Observable<Product> | Product;

  createProduct(request: CreateProductRequest): Promise<Product> | Observable<Product> | Product;

  updateProduct(request: UpdateProductRequest): Promise<Product> | Observable<Product> | Product;

  deleteProduct(request: DeleteProductRequest): Promise<Product> | Observable<Product> | Product;

  listProducts(
    request: ListProductsRequest,
  ): Promise<ListProductsResponse> | Observable<ListProductsResponse> | ListProductsResponse;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getProduct", "createProduct", "updateProduct", "deleteProduct", "listProducts"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";
