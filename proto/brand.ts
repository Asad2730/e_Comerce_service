// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v4.25.2
// source: proto/brand.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "brands";

export interface Brand {
  id: number;
  name: string;
  description: string;
}

export interface GetBrandRequest {
  id: number;
}

export interface CreateBrandRequest {
  brand: Brand | undefined;
}

export interface UpdateBrandRequest {
  brand: Brand | undefined;
}

export interface DeleteBrandRequest {
  id: number;
}

export interface ListBrandsRequest {
}

export interface ListBrandsResponse {
  brands: Brand[];
}

export const BRANDS_PACKAGE_NAME = "brands";

export interface BrandServiceClient {
  getBrand(request: GetBrandRequest): Observable<Brand>;

  createBrand(request: CreateBrandRequest): Observable<Brand>;

  updateBrand(request: UpdateBrandRequest): Observable<Brand>;

  deleteBrand(request: DeleteBrandRequest): Observable<Brand>;

  listBrands(request: ListBrandsRequest): Observable<ListBrandsResponse>;
}

export interface BrandServiceController {
  getBrand(request: GetBrandRequest): Promise<Brand> | Observable<Brand> | Brand;

  createBrand(request: CreateBrandRequest): Promise<Brand> | Observable<Brand> | Brand;

  updateBrand(request: UpdateBrandRequest): Promise<Brand> | Observable<Brand> | Brand;

  deleteBrand(request: DeleteBrandRequest): Promise<Brand> | Observable<Brand> | Brand;

  listBrands(
    request: ListBrandsRequest,
  ): Promise<ListBrandsResponse> | Observable<ListBrandsResponse> | ListBrandsResponse;
}

export function BrandServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getBrand", "createBrand", "updateBrand", "deleteBrand", "listBrands"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BrandService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BrandService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BRAND_SERVICE_NAME = "BrandService";
